{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","React","Component","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","Preloader","Post","item","alt","message","likesCount","MyPosts","memo","postsElements","posts","map","p","postsBlock","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","getUserProfile","getStatus","compose","auth","isAuth","withRouter"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,iBAAmB,wC,oBCArCD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,uICCGC,IAAMC,U,QCwCnBC,EAvCgB,SAACC,GAAW,IAAD,EAERC,oBAAS,GAFD,mBAEjCC,EAFiC,KAEvBC,EAFuB,OAGZF,mBAASD,EAAMI,QAHH,mBAGjCA,EAHiC,KAGzBC,EAHyB,KAKtCC,qBAAU,WACND,EAAUL,EAAMI,UACjB,CAACJ,EAAMI,SAeV,OACI,iCACOF,GACH,8BACI,sBAAMK,cAjBO,WACrBJ,GAAY,IAgBJ,SAAwCH,EAAMI,QAAU,YAG1DF,GACF,8BACI,uBAAOM,SAbI,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAYeC,WAAW,EAAMC,OAlBnC,WACvBV,GAAY,GACZH,EAAMc,aAAaV,IAiBJO,MAAOP,UCPfW,EAtBK,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,QAASZ,EAA0B,EAA1BA,OAAQU,EAAkB,EAAlBA,aACnC,OAAKE,EAMD,8BAKI,sBAAKC,UAAWC,IAAEC,iBAAlB,UACI,qBAAKC,IAAKJ,EAAQK,OAAOC,QACzB,cAAC,EAAD,CAAwBlB,OAAQA,EAAQU,aAAcA,SAZvD,cAACS,EAAA,EAAD,K,4CCSAC,EAdF,SAACxB,GACV,OACI,sBAAKiB,UAAWC,IAAEO,KAAlB,UACI,qBAAKL,IAAI,2NAA2NM,IAAI,WACvO1B,EAAM2B,QACP,gCACI,wCADJ,IACuB3B,EAAM4B,kB,iCCDnCC,EAAUhC,IAAMiC,MAAK,SAAA9B,GACvB,IAAI+B,EAAgB/B,EAAMgC,MAAMC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAMP,QAASO,EAAEP,QAASC,WAAYM,EAAEN,gBAajF,OACI,sBAAKX,UAAWC,IAAEiB,WAAlB,UACI,0CACA,cAACC,EAAD,CAAqBC,SAZb,SAACC,GACbtC,EAAMuC,QAAQD,EAAOE,gBAYjB,qBAAKvB,UAAWC,IAAEc,MAAlB,SACKD,UAQXU,EAAcC,YAAiB,IAgB/BN,EAAsBO,YAAU,CAACC,KAAM,yBAAjBD,EAdL,SAAC3C,GACpB,OACI,uBAAMqC,SAAUrC,EAAM6C,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWC,IAAUC,YAAa,eACrDC,SAAU,CAACC,IAAUX,OAEhC,8BACI,sDAQDZ,I,QCNAwB,EAFUC,aAfH,SAACC,GACnB,MAAO,CACHvB,MAAOuB,EAAMC,YAAYxB,MACzBQ,YAAae,EAAMC,YAAYhB,gBAId,SAACiB,GACtB,MAAO,CACHlB,QAAS,SAACC,GACNiB,EAASC,YAAqBlB,QAKjBc,CAA8CzB,GC9BxD8B,EATC,SAAC3D,GACb,OACI,gCACI,cAAC,EAAD,CAAagB,QAAWhB,EAAMgB,QAASZ,OAAQJ,EAAMI,OAAQU,aAAcd,EAAMc,eACjF,cAAC,EAAD,Q,eCFN8C,E,uKAEF,WACI,IAAIC,EAASC,KAAK9D,MAAM+D,MAAMC,OAAOH,OAChCA,IACDA,EAASC,KAAK9D,MAAMiE,kBAGxBH,KAAK9D,MAAMkE,eAAeL,GAC1BC,KAAK9D,MAAMmE,UAAUN,K,oBAGzB,WACI,OACI,cAAC,EAAD,2BAAaC,KAAK9D,OAAlB,IACSgB,QAAS8C,KAAK9D,MAAMgB,QACpBZ,OAAQ0D,KAAK9D,MAAMI,OACnBU,aAAcgD,KAAK9D,MAAMc,oB,GAjBfjB,IAAMC,WA6BtBsE,sBACXd,aARkB,SAACC,GAAD,MAAY,CAC9BvC,QAASuC,EAAMC,YAAYxC,QAC3BZ,OAAQmD,EAAMC,YAAYpD,OAC1B6D,iBAAkBV,EAAMc,KAAKR,OAC7BS,OAAQf,EAAMc,KAAKC,UAIM,CAACJ,mBAAgBC,cAAWrD,mBACrDyD,IAFWH,CAIbR","file":"static/js/3.5e81350b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React from 'react';\n\nclass ProfileStatus extends React.Component {\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activateEditMode = () => {\n        this.setState ({\n            editMode: true\n        });\n    }\n\n    deactivateEditMode = () => {\n        this.setState ({\n            editMode: false\n        });\n        this.props.updateStatus(this.state.status);\n    }\n\n    onStatusChange = (e) => {\n        this.setState({\n            status: e.currentTarget.value\n        });\n    }\n\n    componentDidUpdate (prevProps, prevState) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status\n            });\n        }\n        console.log(\"componentDidUpdate\")\n    }\n\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                    <div>\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"-----\"}</span>\n                    </div>\n                }\n                {this.state.editMode &&\n                    <div>\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode}\n                               value={this.state.status}/>\n                    </div>\n                }\n            </div>\n        )\n    }\n}\n\nexport default ProfileStatus;","import React, {useEffect, useState} from 'react';\nimport s from './ProfileInfo.module.css';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            { !editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>{props.status || \"-----\"}</span>\n            </div>\n            }\n            { editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                       value={status}/>\n            </div>\n            }\n        </div>\n    )\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatus from './ProfileStatus';\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\n\nconst ProfileInfo = ({profile, status, updateStatus}) => {\n    if (!profile) {\n        return <Preloader />\n    }\n\n\n    return (\n        <div>\n            {/*<div>*/}\n            {/*    <img*/}\n            {/*        src=\"https://p.bigstockphoto.com/GeFvQkBbSLaMdpKXF1Zv_bigstock-Aerial-View-Of-Blue-Lakes-And--227291596.jpg\"/>*/}\n            {/*</div>*/}\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large} />\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default ProfileInfo;","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n    return (\n        <div className={s.item}>\n            <img src='https://gfx.radiozet.pl/var/radiozetsg/storage/images/filmy/avatar-2-prace-nad-filmem-ukonczone-kiedy-premiera/13923495-1-pol-PL/Prace-na-planie-filmu-Avatar-2-zostaly-ukonczone!-Co-z-premiera-widowiska_articleSM.jpg' alt='avatar'/>\n            {props.message}\n            <div>\n                <span>like</span> {props.likesCount}\n            </div>\n        </div>\n\n\n    )\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\n\n\nconst MyPosts = React.memo(props => {\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\n\n    let newPostElement = React.createRef();\n\n    let onAddPost = (values) => {\n        props.addPost(values.newPostText);\n    }\n\n    let onPostChange = () => {\n        let text = newPostElement.current.value;\n        props.updateNewPostText(text);\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n                {/*<Post message={postData[0].message} likesCount={postData[0].likesCount}/>*/}\n                {/*<Post message={postData[1].message} likesCount={postData[1].likesCount}/>*/}\n            </div>\n        </div>\n    )\n});\n\nconst maxLength10 = maxLengthCreator(10);\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field name=\"newPostText\" component={Textarea} placeholder={\"Post message\"}\n                       validate={[required, maxLength10]} />\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n        </form>\n    )\n}\n\nconst AddNewPostFormRedux = reduxForm({form: \"profileAddNewPostForm\"}) (AddNewPostForm);\n\nexport default MyPosts;","import React from 'react';\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n\n// const MyPostsContain = (props) => {\n//     return (\n//         <StoreContext.Consumer>\n//             {\n//             (store) => {\n//                 let state = store.getState();\n//                 let addPost = () => {\n//                     store.dispatch(addPostActionCreator());\n//                 }\n//\n//                 let onPostChange = (text) => {\n//                     let action = updateNewPostTextActionCreator(text);\n//                     store.dispatch(action);\n//                 }\n//                 return <MyPosts updateNewPostText={onPostChange}\n//                          addPost={addPost}\n//                          posts={state.profilePage.posts}\n//                          newPostText={state.profilePage.newPostText}/>\n//             }\n//         }\n//         </StoreContext.Consumer>\n//     )\n// }\n\nlet mapStateToProps = (state) => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText\n    }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\n\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <ProfileInfo profile = {props.profile} status={props.status} updateStatus={props.updateStatus} />\n            <MyPostsContainer  />\n        </div>\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\n\nclass ProfileContainer extends React.Component {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            //\n        }\n        this.props.getUserProfile(userId);\n        this.props.getStatus(userId);\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n});\n\nexport default compose(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\n    withRouter,\n    //withAuthRedirect\n)(ProfileContainer);\n\n"],"sourceRoot":""}