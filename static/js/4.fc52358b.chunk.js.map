{"version":3,"sources":["components/DIalogs/Dialogs.module.css","components/DIalogs/DialogItem/DialogItem.jsx","components/DIalogs/Message/Message.jsx","components/DIalogs/AddMessageForm/AddMessageForm.jsx","components/DIalogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/DIalogs/DialogsContainer.jsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","newMessageBody","isAuth","dialogsItems","values","sendMessage","mapStateToPropsForRedirect","auth","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sGCcnKC,EAXI,SAACC,GAEhB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SACH,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCAnBC,EANC,SAACT,GAEb,OAAO,qBAAKG,UAAWC,IAAEC,OAAlB,SAA2BL,EAAMU,W,yCCAtCC,EAAcC,YAAiB,IAkBtBC,cAAU,CAACC,KAAM,2BAAjBD,EAhBQ,SAACb,GACpB,OACI,uBAAMe,SAAUf,EAAMgB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUV,GACrBH,KAAK,iBAAiBc,YAAY,yBAG7C,8BACI,kDCsBDC,EA9BC,SAACvB,GAEb,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYrB,KAAMqB,EAAErB,KAAiBN,GAAI2B,EAAE3B,IAAZ2B,EAAE3B,OAC1E4B,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,SAAcsB,EAAE9B,OAC9DsB,EAAMS,eAM3B,OAAKjC,EAAMkC,OAGP,sBAAK/B,UAAWC,IAAEuB,QAAlB,UACI,qBAAKxB,UAAWC,IAAE+B,aAAlB,SACKT,IAEL,qBAAKvB,UAAWC,IAAE2B,SAAlB,SACI,8BAAMD,MAGV,cAAC,EAAD,CAAgBf,SAfJ,SAACqB,GACjBpC,EAAMqC,YAAYD,EAAOH,sBAGH,cAAC,IAAD,CAAU1B,GAAI,Y,+CCjBxC+B,EAA6B,SAACd,GAAD,MAAY,CACzCU,OAAQV,EAAMe,KAAKL,S,OCmBRM,sBACXC,aAfkB,SAACjB,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACiB,GACtB,MAAO,CACHL,YAAa,SAACJ,GACVS,EAASC,YAAmBV,UDVR,SAACW,GAAe,IAEtCC,EAFqC,4JAGvC,WACI,OAAKC,KAAK9C,MAAMkC,OAET,cAACU,EAAD,eAAeE,KAAK9C,QAFI,cAAC,IAAD,CAAUO,GAAI,eAJV,GAEXwC,IAAMH,WAYtC,OAHqCH,YAAQH,EAARG,CAAqCI,KCK/DL,CAGbjB","file":"static/js/4.fc52358b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3rZIr\",\"dialogsItems\":\"Dialogs_dialogsItems__2cUCV\",\"active\":\"Dialogs_active__1IVBH\",\"messages\":\"Dialogs_messages__1mPww\",\"message\":\"Dialogs_message__2egxO\"};","import React from \"react\";\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n\n    let path = \"/dialogs/\" + props.id;\n\n    return <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path}>{props.name}</NavLink>\n    </div>\n}\n\n\n\nexport default DialogItem;","import React from \"react\";\nimport s from './../Dialogs.module.css';\n\nconst Message = (props) => {\n\n    return <div className={s.dialog}>{props.message}</div>\n}\n\n\nexport default Message;","import {Field, reduxForm} from \"redux-form\";\nimport React from \"react\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field component={Textarea}\n                       validate={[required, maxLength50]}\n                       name=\"newMessageBody\" placeholder=\"Enter your message\"/>\n            </div>\n\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm({form: 'dialog-add-message-form'})(AddMessageForm);","import React from \"react\";\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router\";\nimport {Field, reduxForm} from \"redux-form\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\n\n\nconst Dialogs = (props) => {\n\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\n    let newMessageBody = state.newMessageBody;\n\n    let addNewMessage = (values) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    if (!props.isAuth) return <Redirect to={\"/login\"} />;\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n\n            </div>\n            <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\n\n\nexport default Dialogs;","import React, {Component} from \"react\";\nimport {Redirect} from \"react-router\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n    isAuth: state.auth.isAuth\n});\n\nexport const withAuthRedirect = (Component) => {\n\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to={\"/login\"} />\n\n            return <Component {...this.props } />\n        }\n    }\n\n\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect) (RedirectComponent);\n\n\n    return ConnectedAuthRedirectComponent;\n}","import React from \"react\";\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {Redirect} from \"react-router\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\n\n\nlet mapStateToProps = (state) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageCreator(newMessageBody));\n\n        }\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n)(Dialogs);"],"sourceRoot":""}